/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/website": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WebsiteController_findAll_v1"];
        put?: never;
        post: operations["WebsiteController_create_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/website/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WebsiteController_findOne_v1"];
        put?: never;
        post?: never;
        delete: operations["WebsiteController_remove_v1"];
        options?: never;
        head?: never;
        patch: operations["WebsiteController_update_v1"];
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_logout_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_register_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_loginGoogle_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_googleCallback_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUser_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserPermissions_v1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/website/{websiteId}/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MemberController_findAll_v1"];
        put?: never;
        post: operations["MemberController_create_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/website/{websiteId}/member/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MemberController_findOne_v1"];
        put?: never;
        post?: never;
        delete: operations["MemberController_remove_v1"];
        options?: never;
        head?: never;
        patch: operations["MemberController_update_v1"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateWebsiteDto: {
            name: string;
            title?: string;
        };
        BlockEntity: {
            props: Record<string, never>;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            id: string;
            websiteId: number;
            order: number;
            type: string;
        };
        WebsiteEntity: {
            id: number;
            name: string;
            domain: string;
            title: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            blocks: components["schemas"]["BlockEntity"][];
        };
        CreateBlockDto: {
            props: Record<string, never>;
            id: string;
            type: string;
        };
        UpdateWebsiteDto: {
            domain?: string;
            blocks: components["schemas"]["CreateBlockDto"][];
            name?: string;
            title?: string;
        };
        NotFoundResponse: {
            /** @enum {number} */
            statusCode: NotFoundResponseStatusCode;
            message: string;
        };
        LoginDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        RegisterDto: {
            /** Format: email */
            email: string;
            password: string;
        };
        UserEntity: {
            id: number;
            displayName: string;
            email: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @enum {string} */
        Role: Role;
        CreateMemberDto: {
            role: components["schemas"]["Role"];
            /** Format: email */
            email: string;
        };
        MemberEntity: {
            role: components["schemas"]["Role"];
            user: components["schemas"]["UserEntity"];
            id: number;
            websiteId: number;
            userId: number;
            hasAcceptedInvite: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateMemberDto: {
            role: components["schemas"]["Role"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaCreateWebsiteDto = components['schemas']['CreateWebsiteDto'];
export type SchemaBlockEntity = components['schemas']['BlockEntity'];
export type SchemaWebsiteEntity = components['schemas']['WebsiteEntity'];
export type SchemaCreateBlockDto = components['schemas']['CreateBlockDto'];
export type SchemaUpdateWebsiteDto = components['schemas']['UpdateWebsiteDto'];
export type SchemaNotFoundResponse = components['schemas']['NotFoundResponse'];
export type SchemaLoginDto = components['schemas']['LoginDto'];
export type SchemaRegisterDto = components['schemas']['RegisterDto'];
export type SchemaUserEntity = components['schemas']['UserEntity'];
export type SchemaRole = components['schemas']['Role'];
export type SchemaCreateMemberDto = components['schemas']['CreateMemberDto'];
export type SchemaMemberEntity = components['schemas']['MemberEntity'];
export type SchemaUpdateMemberDto = components['schemas']['UpdateMemberDto'];
export type $defs = Record<string, never>;
export interface operations {
    WebsiteController_findAll_v1: {
        parameters: {
            query?: {
                /** @description Filter by domain */
                domain?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsiteEntity"][];
                };
            };
        };
    };
    WebsiteController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWebsiteDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsiteEntity"];
                };
            };
        };
    };
    WebsiteController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsiteEntity"];
                };
            };
        };
    };
    WebsiteController_remove_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsiteEntity"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponse"];
                };
            };
        };
    };
    WebsiteController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWebsiteDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebsiteEntity"];
                };
            };
        };
    };
    AuthController_login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    AuthController_logout_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    AuthController_register_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
        };
    };
    AuthController_loginGoogle_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_googleCallback_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getUser_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UsersController_getUserPermissions_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
        };
    };
    MemberController_findAll_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Website ID */
                websiteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberEntity"][];
                };
            };
        };
    };
    MemberController_create_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Website ID */
                websiteId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMemberDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Member doesn't have an account */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponse"];
                };
            };
        };
    };
    MemberController_findOne_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Website ID */
                websiteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberEntity"];
                };
            };
        };
    };
    MemberController_remove_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Website ID */
                websiteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MemberController_update_v1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Website ID */
                websiteId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMemberDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum NotFoundResponseStatusCode {
    Value404 = 404
}
export enum Role {
    ADMIN = "ADMIN",
    USER = "USER"
}
